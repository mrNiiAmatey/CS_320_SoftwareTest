/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package contactservice;

public class Contact {
    // private fields for the objects in the contact
    private final String contactID;
    private String lastName;
    private String firstName;
    private String phoneNumber;
    private String address;

    // constructor to initialize the contact
    public Contact(String contactID, String lastName, String firstName, String phoneNumber, String address) {
        validateContactID(contactID);
        validateLastName(lastName);
        validateFirstName(firstName);
        validatePhoneNumber(phoneNumber);
        validateAddress(address);

        this.contactID = contactID;
        this.lastName = lastName;
        this.firstName = firstName;
        this.phoneNumber = phoneNumber;
        this.address = address;
    }

    // Getters
    public String getContactID() {
        return contactID;
    }

    public String getLastName() {
        return lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getAddress() {
        return address;
    }

    // Setters
    public void setLastName(String lastName) {
        validateLastName(lastName);
        this.lastName = lastName;
    }

    public void setFirstName(String firstName) {
        validateFirstName(firstName);
        this.firstName = firstName;
    }

    public void setPhoneNumber(String phoneNumber) {
        validatePhoneNumber(phoneNumber);
        this.phoneNumber = phoneNumber;
    }

    public void setAddress(String address) {
        validateAddress(address);
        this.address = address;
    }

    // Validation methods
    private void validateContactID(String contactID) {
        if (contactID == null || contactID.length() > 10) {
            throw new IllegalArgumentException("Contact ID is not valid.");
        }
    }

    private void validateLastName(String lastName) {
        if (lastName == null || lastName.length() > 10) {
            throw new IllegalArgumentException("Last name is not valid.");
        }
    }

    private void validateFirstName(String firstName) {
        if (firstName == null || firstName.length() > 10) {
            throw new IllegalArgumentException("First name is not valid.");
        }
    }

    private void validatePhoneNumber(String phoneNumber) {
        if (phoneNumber == null || phoneNumber.length() != 10) {
            throw new IllegalArgumentException("Phone number is not valid.");
        }
    }

    private void validateAddress(String address) {
        if (address == null || address.length() > 30) {
            throw new IllegalArgumentException("Address is not valid.");
        }
    }
}
